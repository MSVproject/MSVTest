#line 2 "lex.cpp"
/* A lexical scanner generated by flex */

/* Scanner skeleton version:
 * $Header: /home/daffy/u0/vern/flex/RCS/flex.skl,v 2.85 95/04/24 10:48:47 vern Exp $
 */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5

#include <stdio.h>


/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
#ifdef c_plusplus
#ifndef __cplusplus
#define __cplusplus
#endif
#endif


#ifdef __cplusplus

#include <stdlib.h>
#include <unistd.h>

/* Use prototypes in function declarations. */
#define YY_USE_PROTOS

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_PROTOS
#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef __TURBOC__
 #pragma warn -rch
 #pragma warn -use
#include <io.h>
#include <stdlib.h>
#define YY_USE_CONST
#define YY_USE_PROTOS
#endif

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif


#ifdef YY_USE_PROTOS
#define YY_PROTO(proto) proto
#else
#define YY_PROTO(proto) ()
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#define YY_BUF_SIZE 16384

typedef struct yy_buffer_state *YY_BUFFER_STATE;

extern int yyleng;
extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

/* The funky do-while in the following #define is used to turn the definition
 * int a single C statement (which needs a semi-colon terminator).  This
 * avoids problems with code like:
 *
 * 	if ( condition_holds )
 *		yyless( 5 );
 *	else
 *		do_something_else();
 *
 * Prior to using the do-while the compiler would get upset at the
 * "else" because it interpreted the "if" statement as being all
 * done when it reached the ';' after the yyless() call.
 */

/* Return all but the first 'n' matched characters back to the input stream. */

#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		*yy_cp = yy_hold_char; \
		yy_c_buf_p = yy_cp = yy_bp + n - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yytext_ptr )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */
typedef unsigned int yy_size_t;


struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;
#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2
	};

static YY_BUFFER_STATE yy_current_buffer = 0;

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 */
#define YY_CURRENT_BUFFER yy_current_buffer


/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;

static int yy_n_chars;		/* number of characters read into yy_ch_buf */


int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 1;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart YY_PROTO(( FILE *input_file ));

void yy_switch_to_buffer YY_PROTO(( YY_BUFFER_STATE new_buffer ));
void yy_load_buffer_state YY_PROTO(( void ));
YY_BUFFER_STATE yy_create_buffer YY_PROTO(( FILE *file, int size ));
void yy_delete_buffer YY_PROTO(( YY_BUFFER_STATE b ));
void yy_init_buffer YY_PROTO(( YY_BUFFER_STATE b, FILE *file ));
void yy_flush_buffer YY_PROTO(( YY_BUFFER_STATE b ));
#define YY_FLUSH_BUFFER yy_flush_buffer( yy_current_buffer )

YY_BUFFER_STATE yy_scan_buffer YY_PROTO(( char *base, yy_size_t size ));
YY_BUFFER_STATE yy_scan_string YY_PROTO(( yyconst char *str ));
YY_BUFFER_STATE yy_scan_bytes YY_PROTO(( yyconst char *bytes, int len ));

static void *yy_flex_alloc YY_PROTO(( yy_size_t ));
static void *yy_flex_realloc YY_PROTO(( void *, yy_size_t ));
static void yy_flex_free YY_PROTO(( void * ));

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (yy_current_buffer->yy_at_bol)

typedef unsigned char YY_CHAR;
FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;
typedef int yy_state_type;
extern char *yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state YY_PROTO(( void ));
static yy_state_type yy_try_NUL_trans YY_PROTO(( yy_state_type current_state ));
static int yy_get_next_buffer YY_PROTO(( void ));
static void yy_fatal_error YY_PROTO(( yyconst char msg[] ));

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 155
#define YY_END_OF_BUFFER 156
static yyconst short int yy_accept[393] =
    {   0,
        0,    0,    0,    0,  156,  150,  149,  148,  100,  150,
      122,  107,   43,  150,  115,  116,  105,  103,  121,  104,
       91,  106,  141,  141,   17,   42,   95,   92,   96,  117,
      118,  108,  140,  140,  140,  140,  140,  140,  140,  140,
      140,  140,  140,  140,  140,  140,  140,  140,  140,  140,
      140,  140,  140,  119,  126,  120,  111,  151,  152,  151,
      151,  149,   99,    0,  144,    0,    0,    0,  113,    1,
      147,  102,  145,  141,    0,    0,   94,    0,  101,  109,
       97,  112,   98,  110,  135,  140,  140,  140,  140,  140,
      140,  140,  140,  140,  140,  140,  140,  140,  140,   34,

      140,  140,  140,  140,  140,  140,  140,  140,  140,  140,
      140,  140,  140,  140,  140,  140,   28,  140,  140,  140,
      140,  140,  140,  140,  140,  140,  127,  140,  140,    3,
      140,  123,  140,  140,  140,  140,  140,  125,  140,  140,
      140,  140,  140,  140,  140,  140,  140,  140,  140,  140,
      140,  140,  140,    9,  154,    0,  144,    0,    0,  146,
      146,  145,    0,  143,  142,  114,   93,   76,  140,   15,
        2,  140,  140,  140,  140,  140,  129,   62,  140,  140,
      140,  140,  140,   70,  140,  140,  140,  140,  140,    5,
      140,  140,  140,   31,  140,  140,  140,  140,  133,  140,

      140,  140,   44,  140,  140,  140,   26,  140,   71,  140,
      140,  140,  140,  140,  140,  140,   75,   25,   10,  140,
      132,  140,  140,  140,  140,  140,  140,   61,  140,  140,
       16,  140,  140,  140,  140,   63,  140,  140,  140,  140,
      140,  140,  140,  140,  140,  124,  153,   65,   64,   66,
      140,   59,   47,   68,  140,  140,   30,  140,  140,   77,
      140,  140,  140,   89,  140,  140,   79,  140,  140,  140,
      139,  140,  140,    7,   51,  140,   14,   78,  140,   49,
      140,  140,   80,   13,   11,  134,  140,  140,  140,  128,
      140,  140,  140,  140,  130,  140,   67,  140,    4,   73,

      140,  140,  140,  140,  140,   52,   69,   29,  140,   23,
      140,  140,  140,   50,  140,  140,   74,    8,  140,  140,
        6,  140,   24,  140,   85,   84,   48,   60,   83,   87,
       86,   27,   82,  140,   39,   81,   72,  140,  140,  140,
      140,  140,  140,  140,   58,  140,  140,  140,  140,  140,
      140,  140,  140,  140,   32,   22,  140,   36,  140,   33,
       19,  140,   18,   88,  140,  138,   38,  140,   41,  140,
       35,  140,  136,   57,   53,   54,   56,   45,   55,   21,
       90,  140,   12,   37,  140,   46,  131,   40,  140,   20,
      137,    0

    } ;

static yyconst int yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    4,    5,    6,    7,    8,    9,   10,   11,
       12,   13,   14,   15,   16,   17,   18,   19,   20,   21,
       22,   22,   22,   22,   22,   22,   22,   23,   24,   25,
       26,   27,    1,    1,   33,   34,   35,   36,   37,   38,
       39,   40,   41,   42,   43,   44,   45,   46,   47,   48,
       49,   50,   51,   52,   53,   54,   55,   56,   57,   58,
       28,   29,   30,   31,   32,    1,   33,   34,   35,   36,

       37,   38,   39,   40,   41,   42,   43,   44,   45,   46,
       47,   48,   49,   50,   51,   52,   53,   54,   55,   56,
       57,   58,   59,   60,   61,   62,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst int yy_meta[63] =
    {   0,
        1,    1,    1,    1,    2,    1,    3,    1,    1,    4,
        1,    1,    1,    1,    1,    1,    1,    1,    5,    6,
        6,    6,    1,    1,    1,    1,    1,    1,    2,    1,
        1,    3,    6,    5,    6,    6,    6,    5,    3,    3,
        3,    3,    3,    3,    3,    7,    3,    3,    3,    7,
        3,    7,    3,    3,    3,    3,    3,    3,    1,    2,
        1,    1
    } ;

static yyconst short int yy_base[399] =
    {   0,
        0,    0,   60,   61,  169, 1657,  163, 1657,  135,   60,
     1657, 1657, 1657,  129, 1657, 1657, 1657, 1657, 1657,  130,
     1657,   53,   62,   71,  128, 1657,   51,  118,   59,  112,
     1657, 1657,   81,  100,   90,   76,  103,  127,   67,   91,
      141,   89,  149,  116,  155,  157,  166,  136,  177,  190,
      175,  188,  201, 1657,   81, 1657, 1657, 1657, 1657,  115,
       85,  123, 1657,   65, 1657,  244,   96,   95, 1657, 1657,
     1657, 1657,  223,  247,  237,    0, 1657,   68, 1657, 1657,
       61, 1657, 1657, 1657, 1657,  199,  215,  234,  239,  240,
      252,  261,  270,  272,  274,  283,  285,  297,  291,  303,

      308,  309,  321,  326,  327,  335,  339,  340,  341,  352,
      354,  371,  366,  358,  377,  382,  383,  388,  394,  405,
      406,  410,  411,  424,  428,  430,  436,  441,  442,  447,
      453,  455,  466,  472,  464,  480,  485,  486,  494,  505,
      506,  517,  518,  519,  530,  538,  536,  549,  550,  558,
      567,  575,  576,   18, 1657,   37,   67,  110,  619, 1657,
       58,  606,  620,  179,    0, 1657, 1657,  607,  609,  615,
      621,  626,  630,  641,  646,  647,  652,  658,  663,  669,
      671,  675,  683,  684,  688,  689,  701,  705,  706,  707,
      718,  723,  724,  729,  735,  741,  737,  754,  743,  755,

      763,  768,  769,  777,  782,  783,  791,  795,  806,  797,
      811,  815,  817,  819,  828,  833,  834,  845,  847,  851,
      853,  859,  864,  865,  870,  883,  885,  887,  889,  898,
      900,  902,  915,  911,  920,  929,  933,  934,  935,  946,
      947,  955,  961,  963,  967, 1657, 1657,  969,  975,  984,
      980,  986,  988,  997,  999, 1003, 1001, 1012, 1014, 1016,
     1018, 1020, 1033, 1035, 1039, 1048, 1050, 1056, 1064, 1069,
     1070, 1081, 1083, 1085, 1087, 1096, 1100, 1102, 1104, 1113,
     1119, 1117, 1118, 1130, 1131, 1132, 1136, 1144, 1145, 1150,
     1158, 1167, 1166, 1172, 1178, 1180, 1184, 1186, 1192, 1197,

     1203, 1209, 1198, 1217, 1221, 1222, 1223, 1234, 1235, 1236,
     1247, 1251, 1252, 1260, 1264, 1265, 1266, 1277, 1278, 1286,
     1290, 1291, 1292, 1303, 1304, 1308, 1309, 1317, 1321, 1322,
     1323, 1334, 1335, 1336, 1347, 1348, 1349, 1362, 1353, 1361,
     1366, 1367, 1378, 1380, 1379, 1392, 1396, 1398, 1400, 1404,
     1415, 1419, 1420, 1431, 1433, 1437, 1442, 1446, 1450, 1454,
     1458, 1459, 1463, 1467, 1471, 1472, 1480, 1484, 1485, 1486,
     1498, 1499, 1500, 1512, 1513, 1517, 1518, 1526, 1530, 1531,
     1532, 1543, 1544, 1545, 1549, 1557, 1561, 1562, 1570, 1574,
     1575, 1657, 1622, 1629, 1636, 1641, 1647, 1650

    } ;

static yyconst short int yy_def[399] =
    {   0,
      392,    1,  393,  393,  392,  392,  392,  392,  392,  394,
      392,  392,  392,  395,  392,  392,  392,  392,  392,  392,
      392,  392,  392,  392,  392,  392,  392,  392,  392,  392,
      392,  392,  396,  396,  396,   35,   35,   35,   35,   35,
       35,   35,   35,   35,   35,   35,   35,   35,   35,   35,
       35,   35,   35,  392,  392,  392,  392,  392,  392,  392,
      392,  392,  392,  394,  392,  394,  392,  397,  392,  392,
      392,  392,  392,  392,  392,  398,  392,  392,  392,  392,
      392,  392,  392,  392,  392,   35,   35,   35,   35,   35,
       35,   35,   35,   35,   35,   35,   35,   35,   35,   35,

       35,   35,   35,   35,   35,   35,   35,   35,   35,   35,
       35,   35,   35,   35,   35,   35,   35,   35,   35,   35,
       35,   35,   35,   35,   35,   35,   35,   35,   35,   35,
       35,   35,   35,   35,   35,   35,   35,   35,   35,   35,
       35,   35,   35,   35,   35,   35,   35,   35,   35,   35,
       35,   35,   35,  392,  392,  392,  394,  394,  394,  392,
      392,  392,  392,  392,  398,  392,  392,   35,   35,   35,
       35,   35,   35,   35,   35,   35,   35,   35,   35,   35,
       35,   35,   35,   35,   35,   35,   35,   35,   35,   35,
       35,   35,   35,   35,   35,   35,   35,   35,   35,   35,

       35,   35,   35,   35,   35,   35,   35,   35,   35,   35,
       35,   35,   35,   35,   35,   35,   35,   35,   35,   35,
       35,   35,   35,   35,   35,   35,   35,   35,   35,   35,
       35,   35,   35,   35,   35,   35,   35,   35,   35,   35,
       35,   35,   35,   35,   35,  392,  392,   35,   35,   35,
       35,   35,   35,   35,   35,   35,   35,   35,   35,   35,
       35,   35,   35,   35,   35,   35,   35,   35,   35,   35,
       35,   35,   35,   35,   35,   35,   35,   35,   35,   35,
       35,   35,   35,   35,   35,   35,   35,   35,   35,   35,
       35,   35,   35,   35,   35,   35,   35,   35,   35,   35,

       35,   35,   35,   35,   35,   35,   35,   35,   35,   35,
       35,   35,   35,   35,   35,   35,   35,   35,   35,   35,
       35,   35,   35,   35,   35,   35,   35,   35,   35,   35,
       35,   35,   35,   35,   35,   35,   35,   35,   35,   35,
       35,   35,   35,   35,   35,   35,   35,   35,   35,   35,
       35,   35,   35,   35,   35,   35,   35,   35,   35,   35,
       35,   35,   35,   35,   35,   35,   35,   35,   35,   35,
       35,   35,   35,   35,   35,   35,   35,   35,   35,   35,
       35,   35,   35,   35,   35,   35,   35,   35,   35,   35,
       35,    0,  392,  392,  392,  392,  392,  392

    } ;

static yyconst short int yy_nxt[1720] =
    {   0,
        6,    7,    8,    9,   10,   11,    6,   12,   13,   14,
       15,   16,   17,   18,   19,   20,   21,   22,   23,   24,
       24,   24,   25,   26,   27,   28,   29,   30,    6,   31,
       32,   33,   34,   33,   35,   36,   37,   38,   39,   40,
       41,   33,   42,   43,   44,   45,   46,   47,   33,   48,
       49,   50,   51,   52,   53,   33,   33,   33,   54,   55,
       56,   57,   59,   59,   65,   70,   78,  160,   79,   65,
       71,   65,   60,   60,  247,   80,   81,  246,   73,   72,
       74,   74,   74,   74,   83,   84,  167,   73,   66,   74,
       74,   74,   74,   66,  166,   66,   61,   61,   75,   87,

       87,   87,   87,  114,  161,  160,   86,   75,   87,   87,
       87,   87,   98,   86,   65,   86,   99,   76,   87,   87,
       87,   87,  100,  115,   62,  119,   95,  116,   86,   96,
       86,  156,  155,   88,   89,   86,   97,   86,   66,   86,
      154,   85,   86,   90,   82,   91,  101,  102,  125,   86,
       92,   93,   86,   77,   94,   86,   69,   68,  103,  104,
       63,  105,  126,   86,   62,  106,   86,  107,  392,  392,
      108,  109,  136,  110,  111,   86,  112,   86,  117,  113,
       86,  120,  137,  138,  121,  122,  118,   86,   86,  123,
      127,  128,  392,   86,   86,  124,   86,  164,  164,  164,

      164,   86,   86,   86,  392,   86,  130,  129,  392,  131,
      132,   86,  133,  139,   86,  134,   86,  140,  135,  141,
      150,   86,  146,  142,   86,  143,   86,   86,  144,  147,
      148,  392,  152,  145,  151,   86,   86,   86,   86,  149,
      153,  162,  162,  162,  162,   86,  392,   86,  157,  392,
      163,   86,  163,  158,   86,  164,  164,  164,  164,   75,
      392,   86,  158,   73,  392,   74,   74,   74,   74,  392,
       86,  392,  159,   86,  392,   86,   86,  158,   86,   86,
       86,  158,  392,   75,  168,  169,   86,  171,   86,  158,
      392,   86,  392,  158,  170,  158,  163,   86,   86,  392,

       86,  172,  173,  158,  174,  392,   86,   86,   86,   86,
       86,   86,  392,   86,  175,  176,   86,  392,   86,   86,
       86,   86,   86,  392,   86,  392,  392,   86,  177,   86,
       86,   86,  392,   86,  179,  178,   86,   86,  392,   86,
      392,  180,   86,   86,   86,   86,  392,   86,   86,   86,
      392,  392,  392,  392,   86,   86,  182,   86,  181,  185,
       86,  183,   86,   86,  392,   86,   86,   86,  184,  186,
      187,  188,   86,   86,   86,   86,   86,   86,   86,   86,
       86,   86,  189,  392,  190,   86,  191,  192,   86,  392,
       86,   86,  392,   86,   86,  392,  392,   86,   86,  193,

       86,  194,   86,  196,   86,   86,  195,  197,  392,  199,
       86,  198,   86,   86,  201,  392,   86,   86,   86,   86,
      200,   86,   86,   86,   86,  392,  392,   86,   86,   86,
      204,  392,  392,   86,   86,  202,  392,  392,  205,  203,
       86,   86,  206,  392,   86,   86,   86,   86,  392,   86,
       86,   86,   86,  392,  392,  207,   86,   86,  392,  392,
       86,  208,  209,   86,   86,  211,   86,   86,  392,   86,
       86,  210,   86,  392,   86,   86,   86,   86,   86,  212,
       86,   86,   86,   86,  392,  214,   86,   86,   86,   86,
      392,   86,   86,   86,   86,  392,  213,  392,  392,   86,

       86,   86,   86,   86,  215,   86,  216,  392,  218,  392,
       86,   86,   86,  219,  222,  221,   86,  392,  220,   86,
      217,   86,   86,  392,   86,   86,   86,  223,  224,  392,
       86,   86,   86,   86,  392,  392,  392,  225,  392,  226,
       86,   86,   86,  227,   86,   86,  230,  392,  392,  392,
      228,   86,   86,   86,   86,   86,   86,   86,   86,  392,
      392,  231,  229,   86,   86,   86,   86,  232,  233,   86,
      392,  392,  237,  392,   86,   86,   86,   86,  235,  392,
      234,  392,   86,  236,   86,   86,   86,  392,   86,   86,
      392,  392,  392,  238,   86,   86,   86,   86,  240,  392,

      392,  392,  239,   86,   86,  392,   86,  243,  241,  242,
      392,   86,   86,   86,   86,   86,  245,  392,  392,  392,
      244,   86,   86,  157,  162,  162,  162,  162,  158,  392,
      392,  392,  392,  163,  392,  163,  392,  158,  164,  164,
      164,  164,   75,   86,  392,   86,   86,  159,   86,  392,
      392,   86,  158,   86,   86,   86,  158,   86,  392,  248,
       86,   86,   86,  392,  158,   86,   86,   86,  158,   86,
      158,  249,   86,  392,  392,  250,   86,   86,  158,  163,
       86,  251,   86,   86,  392,   86,   86,   86,   86,  252,
      392,   86,   86,   86,   86,  392,  253,  254,   86,   86,

      392,  392,   86,  255,   86,   86,  392,  257,   86,   86,
       86,   86,  392,  392,   86,   86,  256,   86,  392,   86,
       86,   86,   86,   86,   86,   86,  258,   86,   86,   86,
       86,  392,  392,  259,   86,   86,  392,   86,  260,  261,
       86,   86,  264,   86,   86,   86,   86,  262,  392,  392,
      265,   86,   86,   86,   86,  392,  263,   86,  267,   86,
      268,  392,   86,   86,  266,   86,  392,  392,   86,   86,
       86,   86,  392,  271,   86,   86,   86,   86,  392,   86,
       86,   86,   86,   86,  392,  270,  269,   86,  273,   86,
       86,   86,  272,   86,   86,  392,  392,  392,  275,   86,

       86,   86,   86,  392,   86,   86,  274,   86,   86,   86,
      392,  392,  392,   86,   86,   86,   86,  392,   86,   86,
      276,   86,   86,   86,  277,  281,  392,   86,   86,   86,
       86,   86,  278,   86,   86,  392,   86,   86,  279,  392,
      282,   86,   86,   86,  392,   86,  280,   86,  283,  392,
       86,  284,   86,   86,   86,   86,   86,   86,   86,  392,
      392,   86,  286,   86,   86,   86,  392,   86,  285,   86,
       86,  392,   86,   86,   86,  287,  392,  392,  288,   86,
       86,   86,  289,   86,   86,  290,   86,   86,  392,   86,
       86,   86,   86,   86,  392,  291,  392,   86,   86,   86,

      292,   86,  392,   86,   86,   86,   86,  392,  392,   86,
       86,   86,  392,  392,  392,  294,   86,  293,  295,   86,
      392,   86,   86,   86,   86,  298,  297,  392,   86,   86,
      296,   86,  392,   86,   86,   86,   86,   86,   86,   86,
      392,   86,  392,  392,   86,  299,   86,   86,   86,  301,
       86,   86,  392,  300,   86,  302,   86,   86,  303,   86,
      392,   86,  305,  306,  392,   86,   86,  304,  307,   86,
      309,  310,   86,   86,   86,   86,  392,  392,  308,   86,
       86,   86,   86,   86,  392,   86,   86,  312,  392,  392,
      392,   86,  311,   86,   86,  313,  314,   86,  392,  315,

       86,   86,   86,   86,  317,   86,   86,   86,   86,   86,
      316,   86,  392,   86,   86,   86,   86,  392,  392,   86,
       86,   86,   86,   86,   86,   86,   86,   86,  392,  392,
       86,  318,   86,   86,   86,   86,   86,   86,   86,   86,
       86,  392,   86,   86,  319,   86,  320,   86,   86,   86,
       86,   86,   86,   86,  323,   86,   86,   86,   86,   86,
       86,  392,   86,  392,   86,  322,   86,  325,  321,   86,
      324,   86,   86,  392,   86,   86,  392,  392,   86,   86,
      392,   86,  392,  326,   86,   86,   86,   86,  392,   86,
      327,  392,   86,  392,   86,   86,   86,  328,  330,  392,

       86,  329,   86,   86,  392,  332,   86,  392,   86,   86,
       86,  392,  392,  392,  331,   86,   86,   86,  392,   86,
       86,   86,   86,   86,   86,  392,   86,   86,  333,   86,
      392,   86,   86,   86,  334,   86,   86,  337,   86,   86,
       86,   86,   86,   86,  392,  392,   86,  335,   86,   86,
       86,  336,   86,   86,   86,   86,   86,   86,   86,   86,
      392,  392,  392,  338,   86,   86,   86,   86,   86,   86,
       86,   86,   86,  392,  392,   86,   86,   86,   86,  392,
       86,   86,   86,   86,   86,  341,   86,  392,  339,   86,
       86,   86,  392,  392,   86,  340,   86,   86,  342,  343,

      392,  392,  344,   86,   86,   86,   86,  345,   86,  392,
      392,   86,   86,   86,   86,  392,  346,   86,   86,   86,
       86,  392,   86,   86,   86,   86,   86,  392,   86,  392,
       86,   86,  347,   86,  352,  348,   86,   86,   86,   86,
      392,  392,   86,   86,   86,   86,  392,  349,   86,   86,
      350,  353,  392,   86,  351,   86,   86,  354,   86,   86,
       86,   86,   86,   86,  392,  392,  392,   86,   86,   86,
       86,   86,   86,   86,   86,   86,  392,  392,  392,  392,
       86,   86,   86,   86,  392,  355,   86,   86,   86,  357,
       86,   86,  356,   86,  392,  358,   86,   86,   86,   86,

       86,  360,   86,   86,   86,   86,   86,  392,  392,  392,
       86,   86,   86,   86,  361,  392,   86,   86,  362,  359,
      392,  392,   86,   86,   86,   86,   86,   86,   86,   86,
       86,   86,   86,  392,  392,  392,   86,   86,   86,  364,
       86,  363,   86,   86,   86,   86,  392,   86,   86,   86,
       86,  392,  392,   86,   86,   86,   86,   86,   86,   86,
       86,   86,   86,   86,  392,  392,  392,   86,   86,   86,
       86,   86,   86,   86,   86,   86,  365,  392,  392,  392,
       86,   86,   86,   86,   86,   86,   86,   86,   86,   86,
      392,  392,   86,   86,   86,   86,  366,  368,   86,   86,

       86,   86,   86,   86,  367,   86,   86,   86,   86,  392,
      392,  392,   86,   86,   86,   86,   86,   86,   86,   86,
      370,  369,  392,  392,   86,   86,   86,  373,   86,  371,
      372,   86,   86,  374,   86,   86,   86,   86,   86,   86,
       86,  392,   86,   86,   86,  392,   86,  376,  392,  375,
       86,   86,  392,  378,   86,   86,   86,  392,   86,   86,
      377,   86,  392,  392,  379,   86,   86,   86,  392,   86,
       86,  380,   86,   86,  392,  381,   86,   86,   86,   86,
      392,   86,   86,   86,  392,   86,   86,  382,   86,   86,
       86,  392,   86,   86,   86,   86,   86,   86,   86,   86,

       86,  383,   86,   86,   86,   86,   86,   86,   86,   86,
       86,   86,  392,   86,  392,  384,   86,  385,   86,   86,
       86,   86,  387,   86,   86,   86,   86,  392,  392,  392,
       86,   86,   86,  386,   86,   86,   86,   86,   86,   86,
      392,  392,  392,  392,   86,   86,   86,  392,   86,   86,
      388,   86,   86,   86,   86,  392,   86,   86,   86,   86,
      392,  392,   86,   86,   86,   86,   86,   86,   86,   86,
       86,   86,   86,  392,  392,  392,   86,   86,   86,  389,
       86,   86,   86,   86,   86,   86,  392,  392,   86,   86,
       86,   86,  392,   86,  390,   86,   86,   86,   86,  392,

       86,   86,  392,   86,  392,  391,   86,   86,   86,   86,
       86,   86,  392,   86,   86,  392,   86,  392,  392,  392,
       86,   86,   58,   58,   58,   58,   58,   58,   58,   64,
       64,   64,   64,   64,   64,   64,   67,   67,   67,  392,
       67,   67,   67,   86,  392,   86,   86,   86,   67,  392,
       67,   67,  392,   67,  165,  165,    5,  392,  392,  392,
      392,  392,  392,  392,  392,  392,  392,  392,  392,  392,
      392,  392,  392,  392,  392,  392,  392,  392,  392,  392,
      392,  392,  392,  392,  392,  392,  392,  392,  392,  392,
      392,  392,  392,  392,  392,  392,  392,  392,  392,  392,

      392,  392,  392,  392,  392,  392,  392,  392,  392,  392,
      392,  392,  392,  392,  392,  392,  392,  392,  392
    } ;

static yyconst short int yy_chk[1720] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    3,    4,   10,   22,   27,  161,   27,   64,
       22,  157,    3,    4,  156,   27,   27,  154,   23,   22,
       23,   23,   23,   23,   29,   29,   81,   24,   10,   24,
       24,   24,   24,   64,   78,  157,    3,    4,   23,   33,

       33,   33,   33,   39,   68,   67,   39,   24,   35,   35,
       35,   35,   36,   39,  158,   36,   36,   23,   34,   34,
       34,   34,   36,   40,   62,   42,   35,   40,   42,   35,
       40,   61,   60,   34,   34,   42,   35,   40,  158,   37,
       55,   30,   37,   34,   28,   34,   37,   37,   44,   37,
       34,   34,   44,   25,   34,   44,   20,   14,   37,   38,
        9,   38,   44,   38,    7,   38,   38,   38,    5,    0,
       38,   38,   48,   38,   38,   48,   38,   41,   41,   38,
       41,   43,   48,   48,   43,   43,   41,   41,   43,   43,
       45,   45,    0,   46,   45,   43,   46,  164,  164,  164,

      164,   45,   47,   46,    0,   47,   46,   45,    0,   46,
       46,   51,   47,   49,   51,   47,   49,   49,   47,   49,
       51,   51,   50,   49,   52,   49,   50,   52,   49,   50,
       50,    0,   53,   49,   52,   86,   50,   53,   86,   50,
       53,   73,   73,   73,   73,   86,    0,   53,   66,    0,
       75,   87,   75,   66,   87,   75,   75,   75,   75,   73,
        0,   87,   66,   74,    0,   74,   74,   74,   74,    0,
       88,    0,   66,   88,    0,   89,   90,   66,   89,   90,
       88,   66,    0,   74,   88,   89,   90,   91,   91,   66,
        0,   91,    0,   66,   90,   66,   75,   92,   91,    0,

       92,   92,   93,   66,   94,    0,   93,   92,   94,   93,
       95,   94,    0,   95,   95,   96,   93,    0,   94,   96,
       95,   97,   96,    0,   97,    0,    0,   99,   96,   96,
       99,   97,    0,   98,   98,   97,   98,   99,    0,  100,
        0,   99,  100,   98,  101,  102,    0,  101,  102,  100,
        0,    0,    0,    0,  101,  102,  102,  103,  101,  104,
      103,  103,  104,  105,    0,  104,  105,  103,  103,  104,
      105,  106,  104,  105,  106,  107,  108,  109,  107,  108,
      109,  106,  107,    0,  107,  107,  108,  109,  110,    0,
      111,  110,    0,  111,  114,    0,    0,  114,  110,  110,

      111,  110,  113,  112,  114,  113,  111,  112,    0,  114,
      112,  113,  113,  115,  116,    0,  115,  112,  116,  117,
      115,  116,  117,  115,  118,    0,    0,  118,  116,  117,
      119,    0,    0,  119,  118,  118,    0,    0,  120,  118,
      119,  120,  121,    0,  120,  121,  122,  123,    0,  122,
      123,  120,  121,    0,    0,  122,  122,  123,    0,    0,
      124,  123,  124,  124,  125,  126,  126,  125,    0,  126,
      124,  125,  127,    0,  125,  127,  126,  128,  129,  126,
      128,  129,  127,  130,    0,  129,  130,  128,  129,  131,
        0,  132,  131,  130,  132,    0,  128,    0,    0,  131,

      135,  132,  133,  135,  131,  133,  133,    0,  134,    0,
      135,  134,  133,  134,  136,  135,  136,    0,  134,  136,
      133,  137,  138,    0,  137,  138,  136,  136,  136,    0,
      139,  137,  138,  139,    0,    0,    0,  137,    0,  139,
      139,  140,  141,  140,  140,  141,  141,    0,    0,    0,
      140,  140,  141,  142,  143,  144,  142,  143,  144,    0,
        0,  142,  140,  142,  143,  144,  145,  143,  144,  145,
        0,    0,  147,    0,  146,  147,  145,  146,  146,    0,
      145,    0,  147,  146,  146,  148,  149,    0,  148,  149,
        0,    0,    0,  148,  150,  148,  149,  150,  150,    0,

        0,    0,  149,  151,  150,    0,  151,  151,  150,  150,
        0,  152,  153,  151,  152,  153,  153,    0,    0,    0,
      152,  152,  153,  159,  162,  162,  162,  162,  159,    0,
        0,    0,    0,  163,    0,  163,    0,  159,  163,  163,
      163,  163,  162,  168,    0,  169,  168,  159,  169,    0,
        0,  170,  159,  168,  170,  169,  159,  171,    0,  169,
      171,  170,  172,    0,  159,  172,  173,  171,  159,  173,
      159,  172,  172,    0,    0,  173,  173,  174,  159,  163,
      174,  174,  175,  176,    0,  175,  176,  174,  177,  175,
        0,  177,  175,  176,  178,    0,  176,  178,  177,  179,

        0,    0,  179,  179,  178,  180,    0,  181,  180,  179,
      181,  182,    0,    0,  182,  180,  180,  181,    0,  183,
      184,  182,  183,  184,  185,  186,  182,  185,  186,  183,
      184,    0,    0,  183,  185,  186,    0,  187,  185,  186,
      187,  188,  189,  190,  188,  189,  190,  187,    0,    0,
      191,  188,  189,  190,  191,    0,  188,  191,  192,  192,
      193,    0,  192,  193,  191,  194,    0,    0,  194,  192,
      193,  195,    0,  197,  195,  194,  197,  196,    0,  199,
      196,  195,  199,  197,    0,  196,  195,  196,  198,  199,
      198,  200,  197,  198,  200,    0,    0,    0,  201,  201,

      198,  200,  201,    0,  202,  203,  200,  202,  203,  201,
        0,    0,    0,  204,  202,  203,  204,    0,  205,  206,
      202,  205,  206,  204,  204,  209,    0,  207,  205,  206,
      207,  208,  205,  210,  208,    0,  210,  207,  206,    0,
      210,  208,  209,  210,    0,  209,  208,  211,  211,    0,
      211,  212,  209,  213,  212,  214,  213,  211,  214,    0,
        0,  212,  214,  213,  215,  214,    0,  215,  213,  216,
      217,    0,  216,  217,  215,  215,    0,    0,  216,  216,
      217,  218,  218,  219,  218,  220,  219,  220,    0,  221,
      220,  218,  221,  219,    0,  222,    0,  220,  222,  221,

      223,  224,    0,  223,  224,  222,  225,    0,    0,  225,
      223,  224,    0,    0,    0,  225,  225,  224,  226,  226,
        0,  227,  226,  228,  227,  229,  228,    0,  229,  226,
      227,  227,    0,  228,  230,  229,  231,  230,  232,  231,
        0,  232,    0,    0,  230,  230,  231,  234,  232,  233,
      234,  233,    0,  232,  233,  233,  235,  234,  233,  235,
        0,  233,  234,  235,    0,  236,  235,  233,  236,  237,
      238,  239,  237,  238,  239,  236,    0,    0,  237,  237,
      238,  239,  240,  241,    0,  240,  241,  241,    0,    0,
        0,  242,  240,  241,  242,  242,  243,  243,    0,  244,

      243,  242,  244,  245,  250,  248,  245,  243,  248,  244,
      245,  249,    0,  245,  249,  248,  251,    0,    0,  251,
      250,  249,  252,  250,  253,  252,  251,  253,    0,    0,
      250,  251,  252,  254,  253,  255,  254,  257,  255,  256,
      257,    0,  256,  254,  255,  255,  256,  257,  258,  256,
      259,  258,  260,  259,  261,  260,  262,  261,  258,  262,
      259,    0,  260,    0,  261,  259,  262,  263,  258,  263,
      262,  264,  263,    0,  264,  265,    0,    0,  265,  263,
        0,  264,    0,  263,  266,  265,  267,  266,    0,  267,
      265,    0,  268,    0,  266,  268,  267,  266,  269,    0,

      269,  268,  268,  269,    0,  270,  271,    0,  270,  271,
      269,    0,    0,    0,  269,  270,  271,  272,    0,  273,
      272,  274,  273,  275,  274,    0,  275,  272,  272,  273,
        0,  274,  276,  275,  273,  276,  277,  281,  278,  277,
      279,  278,  276,  279,    0,    0,  277,  276,  278,  280,
      279,  279,  280,  282,  283,  281,  282,  283,  281,  280,
        0,    0,    0,  282,  283,  281,  284,  285,  286,  284,
      285,  286,  287,    0,    0,  287,  284,  285,  286,    0,
      288,  289,  287,  288,  289,  289,  290,    0,  287,  290,
      288,  289,    0,    0,  291,  288,  290,  291,  291,  292,

        0,    0,  293,  292,  291,  293,  292,  294,  294,    0,
        0,  294,  293,  292,  295,    0,  296,  295,  294,  296,
      297,    0,  298,  297,  295,  298,  296,    0,  299,    0,
      297,  299,  298,  300,  303,  301,  300,  303,  299,  301,
        0,    0,  301,  300,  303,  302,    0,  301,  302,  301,
      301,  304,    0,  304,  302,  302,  304,  305,  306,  307,
      305,  306,  307,  304,    0,    0,    0,  305,  306,  307,
      308,  309,  310,  308,  309,  310,    0,    0,    0,    0,
      308,  309,  310,  311,    0,  309,  311,  312,  313,  312,
      312,  313,  311,  311,    0,  313,  314,  312,  313,  314,

      315,  316,  317,  315,  316,  317,  314,    0,    0,    0,
      315,  316,  317,  318,  319,    0,  318,  319,  320,  315,
        0,    0,  320,  318,  319,  320,  321,  322,  323,  321,
      322,  323,  320,    0,    0,    0,  321,  322,  323,  324,
      325,  322,  324,  325,  326,  327,    0,  326,  327,  324,
      325,    0,    0,  328,  326,  327,  328,  329,  330,  331,
      329,  330,  331,  328,    0,    0,    0,  329,  330,  331,
      332,  333,  334,  332,  333,  334,  334,    0,    0,    0,
      332,  333,  334,  335,  336,  337,  335,  336,  337,  339,
        0,    0,  339,  335,  336,  337,  338,  340,  338,  339,

      340,  338,  341,  342,  339,  341,  342,  340,  338,    0,
        0,    0,  341,  342,  343,  345,  344,  343,  345,  344,
      342,  341,    0,    0,  343,  345,  344,  346,  346,  343,
      344,  346,  347,  347,  348,  347,  349,  348,  346,  349,
      350,    0,  347,  350,  348,    0,  349,  349,    0,  348,
      350,  351,    0,  351,  351,  352,  353,    0,  352,  353,
      350,  351,    0,    0,  352,  352,  353,  354,    0,  355,
      354,  353,  355,  356,    0,  354,  356,  354,  357,  355,
        0,  357,  358,  356,    0,  358,  359,  357,  357,  359,
      360,    0,  358,  360,  361,  362,  359,  361,  362,  363,

      360,  359,  363,  364,  361,  362,  364,  365,  366,  363,
      365,  366,    0,  364,    0,  362,  367,  365,  366,  367,
      368,  369,  370,  368,  369,  370,  367,    0,    0,    0,
      368,  369,  370,  368,  371,  372,  373,  371,  372,  373,
        0,    0,    0,    0,  371,  372,  373,    0,  374,  375,
      372,  374,  375,  376,  377,    0,  376,  377,  374,  375,
        0,    0,  378,  376,  377,  378,  379,  380,  381,  379,
      380,  381,  378,    0,    0,    0,  379,  380,  381,  382,
      383,  384,  382,  383,  384,  385,    0,    0,  385,  382,
      383,  384,    0,  386,  385,  385,  386,  387,  388,    0,

      387,  388,    0,  386,    0,  389,  389,  387,  388,  389,
      390,  391,    0,  390,  391,    0,  389,    0,    0,    0,
      390,  391,  393,  393,  393,  393,  393,  393,  393,  394,
      394,  394,  394,  394,  394,  394,  395,  395,  395,    0,
      395,  395,  395,  396,    0,  396,  396,  396,  397,    0,
      397,  397,    0,  397,  398,  398,  392,  392,  392,  392,
      392,  392,  392,  392,  392,  392,  392,  392,  392,  392,
      392,  392,  392,  392,  392,  392,  392,  392,  392,  392,
      392,  392,  392,  392,  392,  392,  392,  392,  392,  392,
      392,  392,  392,  392,  392,  392,  392,  392,  392,  392,

      392,  392,  392,  392,  392,  392,  392,  392,  392,  392,
      392,  392,  392,  392,  392,  392,  392,  392,  392
    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
char *yytext;
#line 1 "MSV.l"
#define INITIAL 0
#line 2 "MSV.l"
#include"function.h"
#include <string.h> // strcpy, strncpy
#include <math.h>
//#include <io.h>     // isatty.h>
//#include "map.h"
//extern CMAP g_StructNameMap;
int lineno=1;

#include"SyntaxNode.h"

// For some reason isatty is called _isatty in Visual C++
#ifdef MSVC
#define isatty _isatty
#endif

// Forward declarations for include files
class CSyntaxNode;
//class Symbol;
//class SymbolTable;

// Make sure our variables get created
#define  _LEX_CPP_
//#include "lex.h"
//#include "lexSymbol.h"
#include"parse.cpp.h"


// The yywrap and error functions are declared by the caller
//extern "C" int yywrap();
extern void error( char *cFormat, ... );
extern

void DeleteSingleLineComment (void);
void passStringConstant (void);

#define comment 1

/*
\b 退格
\f 走纸换页
\n 换行
\r 回车
\t 横向跳格 (Ctrl-I)
\' 单引号
\" 双引号
\\反斜杠
*/
#line 921 "lex.cpp"

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap YY_PROTO(( void ));
#else
extern int yywrap YY_PROTO(( void ));
#endif
#endif

#ifndef YY_NO_UNPUT
static void yyunput YY_PROTO(( int c, char *buf_ptr ));
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy YY_PROTO(( char *, yyconst char *, int ));
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput YY_PROTO(( void ));
#else
static int input YY_PROTO(( void ));
#endif
#endif

#if YY_STACK_USED
static int yy_start_stack_ptr = 0;
static int yy_start_stack_depth = 0;
static int *yy_start_stack = 0;
#ifndef YY_NO_PUSH_STATE
static void yy_push_state YY_PROTO(( int new_state ));
#endif
#ifndef YY_NO_POP_STATE
static void yy_pop_state YY_PROTO(( void ));
#endif
#ifndef YY_NO_TOP_STATE
static int yy_top_state YY_PROTO(( void ));
#endif

#else
#define YY_NO_PUSH_STATE 1
#define YY_NO_POP_STATE 1
#define YY_NO_TOP_STATE 1
#endif

#ifdef YY_MALLOC_DECL
YY_MALLOC_DECL
#else
#if __STDC__
#ifndef __cplusplus
#include <stdlib.h>
#endif
#else
/* Just try to get by without declaring the routines.  This will fail
 * miserably on non-ANSI systems for which sizeof(size_t) != sizeof(int)
 * or sizeof(void*) != sizeof(int).
 */
#endif
#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */

#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO (void) fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( yy_current_buffer->yy_is_interactive ) \
		{ \
		int c = '*', n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else if ( ((result = fread( buf, 1, max_size, yyin )) == 0) \
		  && ferror( yyin ) ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL int yylex YY_PROTO(( void ))
#endif

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

YY_DECL
	{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;

#line 66 "MSV.l"


#line 1071 "lex.cpp"

	if ( yy_init )
		{
		yy_init = 0;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yy_start )
			yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! yy_current_buffer )
			yy_current_buffer =
				yy_create_buffer( yyin, YY_BUF_SIZE );

		yy_load_buffer_state();
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yy_start;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				yy_last_accepting_state = yy_current_state;
				yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 393 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 1657 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = yy_last_accepting_cpos;
			yy_current_state = yy_last_accepting_state;
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;


do_action:	/* This label is used only to access EOF actions. */


		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yy_hold_char;
			yy_cp = yy_last_accepting_cpos;
			yy_current_state = yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 68 "MSV.l"
BEGIN comment;
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 70 "MSV.l"
{return AND;}
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 71 "MSV.l"
{return OR;}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 72 "MSV.l"
{return SKIP;}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 73 "MSV.l"
{return FINAL;}
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 74 "MSV.l"
{return EMPTY;}
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 75 "MSV.l"
{return HALT;}
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 76 "MSV.l"
{return AWAIT;}
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 77 "MSV.l"
{return PARALLEL;}
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 78 "MSV.l"
{return PROJECTION;}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 79 "MSV.l"
{return NEXT;}
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 80 "MSV.l"
{return W_NEXT;}
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 81 "MSV.l"
{return MORE;}
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 82 "MSV.l"
{return KEEP;}
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 83 "MSV.l"
{return ALWAYS;}
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 84 "MSV.l"
{return SOMETIMES;}
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 85 "MSV.l"
{return COLON;}
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 86 "MSV.l"
{return EXIST;}
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 87 "MSV.l"
{return DEFINE;}
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 88 "MSV.l"
{return FUNCTION;}
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 89 "MSV.l"
{return STRUCT;}
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 90 "MSV.l"
{return UNION;}
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 91 "MSV.l"
{return MY_TRUE;}
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 92 "MSV.l"
{return MY_FALSE;}
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 93 "MSV.l"
{return PREVIOUS;}
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 94 "MSV.l"
{return LENGTH;}
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 95 "MSV.l"
{return FRAME;}
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 96 "MSV.l"
{return IF;}
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 97 "MSV.l"
{return THEN;}
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 98 "MSV.l"
{return ELSE;}
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 99 "MSV.l"
{return FOR;}
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 100 "MSV.l"
{return TIMES;}
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 101 "MSV.l"
{return WHILE;}
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 102 "MSV.l"
{return DO;}
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 103 "MSV.l"
{return REPEAT;}
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 104 "MSV.l"
{return UNTIL;}
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 105 "MSV.l"
{return DISPLAY;}
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 106 "MSV.l"
{return DISPLAY;}
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 107 "MSV.l"
{return REQUEST;}
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 108 "MSV.l"
{return REQUEST;}
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 109 "MSV.l"
{return PREFIX;}
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 110 "MSV.l"
{return CHOP;}
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 111 "MSV.l"
{return ADDRESS;}
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 113 "MSV.l"
{return INTDECLARATION;}//  added by Jane 2012-05-21
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 114 "MSV.l"
{return STRDECLARATION;}//STRVARIABLE  added by Jane 2012-05-21
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 115 "MSV.l"
{return POINTERDECLARATION;}//POINTER  added by Jane 2012-05-21
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 116 "MSV.l"
{return CHARDECLARATION;}//CHARVARIABLE  added by Jane 2012-05-21
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 117 "MSV.l"
{return FLOATDECLARATION;}//FLOATVARIABLE  added by Jane 2012-05-21
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 118 "MSV.l"
{return LISTDECLARATION;}//LISTVARIABLE  added by Jane 2012-05-21
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 119 "MSV.l"
{return VOIDDECLARATION;}
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 121 "MSV.l"
{return		STRFUNCHEAD;}
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 122 "MSV.l"
{return		STRFUNCTAIL;}
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 123 "MSV.l"
{return		STRFUNCCAT;}
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 124 "MSV.l"
{return		STRFUNCCMP;}
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 125 "MSV.l"
{return		STRFUNCLEN;}
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 126 "MSV.l"
{return		STRFUNCCPY;}
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 127 "MSV.l"
{return     SIZEOF;}
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 130 "MSV.l"
{return ROUND;}
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 131 "MSV.l"
{return CEIL;}
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 132 "MSV.l"
{return FLOOR;}
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 134 "MSV.l"
{return SIN;}
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 135 "MSV.l"
{return COS;}
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 136 "MSV.l"
{return TAN;}
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 137 "MSV.l"
{return ASIN;}
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 138 "MSV.l"
{return ACOS;}
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 139 "MSV.l"
{return ATAN;}
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 140 "MSV.l"
{return SINH;}
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 141 "MSV.l"
{return COSH;}
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 142 "MSV.l"
{return TANH;}
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 143 "MSV.l"
{return EXP;}
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 144 "MSV.l"
{return LOG;}
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 145 "MSV.l"
{return LOG10;}
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 146 "MSV.l"
{return SQRT;}
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 148 "MSV.l"
{return ATAN2;}
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 149 "MSV.l"
{return POW;}
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 151 "MSV.l"
{return ABS;}
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 152 "MSV.l"
{return FABS;}
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 153 "MSV.l"
{return LABS;}
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 155 "MSV.l"
{return FMOD;}
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 156 "MSV.l"
{return MODF;}
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 157 "MSV.l"
{return LDEXP;}
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 158 "MSV.l"
{return FREXP;}
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 160 "MSV.l"
{return FOPEN;}
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 161 "MSV.l"
{return FGETS;}
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 162 "MSV.l"
{return FGETC;}
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 163 "MSV.l"
{return FPUTS;}
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 164 "MSV.l"
{return FPUTC;}
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 165 "MSV.l"
{return FCLOSE;}
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 166 "MSV.l"
{return FILEDECLARATION;}
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 167 "MSV.l"
{return SYSTEM;}
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 169 "MSV.l"
{return DOT;}
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 170 "MSV.l"
{return EQU;}     //比较相等符号 “=”
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 171 "MSV.l"
{return ASS_EQU;}   //赋值符号已修改为“<==”
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 173 "MSV.l"
{return UNITASSIGN;}
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 175 "MSV.l"
{return LT;}
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 176 "MSV.l"
{return GT;}
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 177 "MSV.l"
{return LE;}
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 178 "MSV.l"
{return GE;}
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 179 "MSV.l"
{return NE;}
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 180 "MSV.l"
{return NEGATION;}
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 181 "MSV.l"
{return PBEGIN;}
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 182 "MSV.l"
{return PEND;}
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 184 "MSV.l"
{return ADD;}
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 185 "MSV.l"
{return SUB;}
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 186 "MSV.l"
{return MUL;}
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 187 "MSV.l"
{return DIV;}
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 188 "MSV.l"
{return MOD;}
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 189 "MSV.l"
{return CON;}
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 190 "MSV.l"
{return LST;}//add by yubin 2013-12-19 左移 left shift
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 191 "MSV.l"
{return RST;}//add by yubin 2013-12-19 右移 right shift
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 192 "MSV.l"
{return BNE;}//add by yubin 2013-12-20 按位非 bit negation
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 194 "MSV.l"
{return PROPIMPLY;}
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 195 "MSV.l"
{return IMPLY;}
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 196 "MSV.l"
{return IFF;}
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 198 "MSV.l"
{return OPEN_PAR;}
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 199 "MSV.l"
{return CLOSE_PAR;}
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 200 "MSV.l"
{return OPEN_MPAR;}
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 201 "MSV.l"
{return CLOSE_MPAR;}
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 202 "MSV.l"
{return OPEN_BPAR;}
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 203 "MSV.l"
{return CLOSE_BPAR;}
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 204 "MSV.l"
{return COMMA;}
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 205 "MSV.l"
{return CHOPSTAR;}
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 208 "MSV.l"
{return OVER;}//2010-04-23 add
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 209 "MSV.l"
{return CYLINDER;}//2010-04-23 add
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 210 "MSV.l"
{return OVEREP;}//2010-07-07 add
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 212 "MSV.l"
{return	INTER_OR;}//2011-08-22 Jane added begin
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 213 "MSV.l"
{return NON_DETERMINED;}//2011-08-22 Jane added end
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 215 "MSV.l"
{return PROCESS;}
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 216 "MSV.l"
{return CHANNEL;}
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 217 "MSV.l"
{return SEND;}
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 218 "MSV.l"
{return RECEIVE;}
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 219 "MSV.l"
{return PUT;}
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 220 "MSV.l"
{return GET;}
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 222 "MSV.l"
{return POINTERNULL;}
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 223 "MSV.l"
{return ARRAY;}
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 225 "MSV.l"
{return SIGNED;}
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 226 "MSV.l"
{return UNSIGNED;}
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 228 "MSV.l"
{return MALLOC;}//yangkai malloc相关
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 229 "MSV.l"
{return FREE;}
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 232 "MSV.l"
{
			   yylval.cString=new char[strlen(yytext)+1];
			   strcpy(yylval.cString,yytext);

			  // if(!g_StructNameMap.find(yytext))
			 // {
			       return ID;
			 //  }
			  // else
			  // {
                   return STRUCT_TYPE;
			 //  }
		}
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 245 "MSV.l"
{
               yylval.nInteger=atoi(yytext);
               return INTEGER;
		 }
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 249 "MSV.l"
{
               int decValue;//int，保存16进制对应的十进制数
			   sscanf(yytext,"%x",&decValue);//将16进制字符串转成10进制数
			   yylval.nInteger=decValue;//将10进制数赋给yytext
               return INTEGER;
			}
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 255 "MSV.l"
{
               char* result=NULL;
			   result=strtok(yytext, "e");
			   int iVal;
			   float fVal;
			   sscanf(result, "%f", &fVal);
			   while(result!=NULL)
			   {
			      sscanf(result, "%d", &iVal);
				  result = strtok(NULL, "e");
				}

               yylval.floatval = fVal*pow(10, iVal);
			   return FLOATLITERAL;
			}
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 270 "MSV.l"
{
               passStringConstant ();
			   return STR;
         }
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 275 "MSV.l"
{
				yylval. floatval = atof(yytext);
				return FLOATLITERAL;
		 }//Added by Jane 2012-05-21
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 279 "MSV.l"
{//modified by yubin 2014/2/25，第一个if分支处理没有转义字符的情况，下面的分支处理有转义字符的情况
				if(yytext[1]!='\\')
				{
					yylval.character=yytext[1];
					return CHARLITERAL;
				}
				else if(yytext[2]=='n')
				{
					yylval.character='\n';
					return CHARLITERAL;
				}
				else if(yytext[2]=='b')
				{
					yylval.character='\b';
					return CHARLITERAL;
				}
				else if(yytext[2]=='f')
				{
					yylval.character='\f';
					return CHARLITERAL;
				}
				else if(yytext[2]=='r')
				{
					yylval.character='\r';
					return CHARLITERAL;
				}
				else if(yytext[2]=='t')
				{
					yylval.character='\t';
					return CHARLITERAL;
				}
				else if(yytext[2]=='\'')
				{
					yylval.character='\'';
					return CHARLITERAL;
				}
				else if(yytext[2]=='\"')
				{
					yylval.character='\"';
					return CHARLITERAL;
				}
				else if(yytext[2]=='\\')
				{
					yylval.character='\\';
					return CHARLITERAL;
				}
				else if(yytext[2]=='0')
				{
					yylval.character='\0';
					return CHARLITERAL;
				}
		}   //2013-4-22 add by YY[fixed]
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 334 "MSV.l"
{DeleteSingleLineComment();}
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 335 "MSV.l"
{++lineno;}
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 336 "MSV.l"
{}
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 337 "MSV.l"
{return ERROR_TOKEN;}
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 339 "MSV.l"
{}
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 340 "MSV.l"
{++lineno;}
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 341 "MSV.l"
{error("EOF in comment");}
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 342 "MSV.l"
{BEGIN 0;}
	YY_BREAK
case 155:
YY_RULE_SETUP
#line 344 "MSV.l"
ECHO;
	YY_BREAK
#line 2020 "lex.cpp"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(comment):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yy_hold_char;

		if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between yy_current_buffer and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yy_n_chars = yy_current_buffer->yy_n_chars;
			yy_current_buffer->yy_input_file = yyin;
			yy_current_buffer->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yy_c_buf_p <= &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yy_c_buf_p = yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state();

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer() )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yy_did_buffer_switch_on_eof = 0;

				if ( yywrap() )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yy_c_buf_p =
					yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yy_c_buf_p =
				&yy_current_buffer->yy_ch_buf[yy_n_chars];

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of yylex */


/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */

static int yy_get_next_buffer()
	{
	register char *dest = yy_current_buffer->yy_ch_buf;
	register char *source = yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yy_c_buf_p > &yy_current_buffer->yy_ch_buf[yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( yy_current_buffer->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yy_c_buf_p - yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a singled characater, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yy_c_buf_p - yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		yy_n_chars = 0;

	else
		{
		int num_to_read =
			yy_current_buffer->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */
#ifdef YY_USES_REJECT
			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );
#else

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = yy_current_buffer;

			int yy_c_buf_p_offset =
				(int) (yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yy_flex_realloc( (void *) b->yy_ch_buf,
							 b->yy_buf_size + 2 );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = yy_current_buffer->yy_buf_size -
						number_to_move - 1;
#endif
			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&yy_current_buffer->yy_ch_buf[number_to_move]),
			yy_n_chars, num_to_read );
		}

	if ( yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			yy_current_buffer->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	yy_n_chars += number_to_move;
	yy_current_buffer->yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	yy_current_buffer->yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yytext_ptr = &yy_current_buffer->yy_ch_buf[0];

	return ret_val;
	}


/* yy_get_previous_state - get the state just before the EOB char was reached */

static yy_state_type yy_get_previous_state()
	{
	register yy_state_type yy_current_state;
	register char *yy_cp;

	yy_current_state = yy_start;

	for ( yy_cp = yytext_ptr + YY_MORE_ADJ; yy_cp < yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yy_last_accepting_state = yy_current_state;
			yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 393 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
	}


/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */

#ifdef YY_USE_PROTOS
static yy_state_type yy_try_NUL_trans( yy_state_type yy_current_state )
#else
static yy_state_type yy_try_NUL_trans( yy_current_state )
yy_state_type yy_current_state;
#endif
	{
	register int yy_is_jam;
	register char *yy_cp = yy_c_buf_p;

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yy_last_accepting_state = yy_current_state;
		yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 393 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 392);

	return yy_is_jam ? 0 : yy_current_state;
	}


#ifndef YY_NO_UNPUT
#ifdef YY_USE_PROTOS
static void yyunput( int c, register char *yy_bp )
#else
static void yyunput( c, yy_bp )
int c;
register char *yy_bp;
#endif
	{
	register char *yy_cp = yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yy_hold_char;

	if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = yy_n_chars + 2;
		register char *dest = &yy_current_buffer->yy_ch_buf[
					yy_current_buffer->yy_buf_size + 2];
		register char *source =
				&yy_current_buffer->yy_ch_buf[number_to_move];

		while ( source > yy_current_buffer->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		yy_n_chars = yy_current_buffer->yy_buf_size;

		if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;


	yytext_ptr = yy_bp;
	yy_hold_char = *yy_cp;
	yy_c_buf_p = yy_cp;
	}
#endif	/* ifndef YY_NO_UNPUT */


#ifdef __cplusplus
static int yyinput()
#else
static int input()
#endif
	{
	int c;

	*yy_c_buf_p = yy_hold_char;

	if ( *yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yy_c_buf_p < &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			/* This was really a NUL. */
			*yy_c_buf_p = '\0';

		else
			{ /* need more input */
			yytext_ptr = yy_c_buf_p;
			++yy_c_buf_p;

			switch ( yy_get_next_buffer() )
				{
				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap() )
						{
						yy_c_buf_p =
						yytext_ptr + YY_MORE_ADJ;
						return EOF;
						}

					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;
					break;

				case EOB_ACT_LAST_MATCH:
#ifdef __cplusplus
					YY_FATAL_ERROR(
					"unexpected last match in yyinput()" );
#else
					YY_FATAL_ERROR(
					"unexpected last match in input()" );
#endif
				}
			}
		}

	c = *(unsigned char *) yy_c_buf_p;	/* cast for 8-bit char's */
	*yy_c_buf_p = '\0';	/* preserve yytext */
	yy_hold_char = *++yy_c_buf_p;


	return c;
	}


#ifdef YY_USE_PROTOS
void yyrestart( FILE *input_file )
#else
void yyrestart( input_file )
FILE *input_file;
#endif
	{
	if ( ! yy_current_buffer )
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE );

	yy_init_buffer( yy_current_buffer, input_file );
	yy_load_buffer_state();
	}


#ifdef YY_USE_PROTOS
void yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
#else
void yy_switch_to_buffer( new_buffer )
YY_BUFFER_STATE new_buffer;
#endif
	{
	if ( yy_current_buffer == new_buffer )
		return;

	if ( yy_current_buffer )
		{
		/* Flush out information for old buffer. */
		*yy_c_buf_p = yy_hold_char;
		yy_current_buffer->yy_buf_pos = yy_c_buf_p;
		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	yy_current_buffer = new_buffer;
	yy_load_buffer_state();

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yy_did_buffer_switch_on_eof = 1;
	}


#ifdef YY_USE_PROTOS
void yy_load_buffer_state( void )
#else
void yy_load_buffer_state()
#endif
	{
	yy_n_chars = yy_current_buffer->yy_n_chars;
	yytext_ptr = yy_c_buf_p = yy_current_buffer->yy_buf_pos;
	yyin = yy_current_buffer->yy_input_file;
	yy_hold_char = *yy_c_buf_p;
	}


#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_create_buffer( FILE *file, int size )
#else
YY_BUFFER_STATE yy_create_buffer( file, size )
FILE *file;
int size;
#endif
	{
	YY_BUFFER_STATE b;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yy_flex_alloc( b->yy_buf_size + 2 );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
	}


#ifdef YY_USE_PROTOS
void yy_delete_buffer( YY_BUFFER_STATE b )
#else
void yy_delete_buffer( b )
YY_BUFFER_STATE b;
#endif
	{
	if ( ! b )
		return;

	if ( b == yy_current_buffer )
		yy_current_buffer = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yy_flex_free( (void *) b->yy_ch_buf );

	yy_flex_free( (void *) b );
	}


#ifndef YY_ALWAYS_INTERACTIVE
#ifndef YY_NEVER_INTERACTIVE
extern int isatty YY_PROTO(( int ));
#endif
#endif

#ifdef YY_USE_PROTOS
void yy_init_buffer( YY_BUFFER_STATE b, FILE *file )
#else
void yy_init_buffer( b, file )
YY_BUFFER_STATE b;
FILE *file;
#endif


	{
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

#if YY_ALWAYS_INTERACTIVE
	b->yy_is_interactive = 1;
#else
#if YY_NEVER_INTERACTIVE
	b->yy_is_interactive = 0;
#else
	b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
#endif
#endif
	}


#ifdef YY_USE_PROTOS
void yy_flush_buffer( YY_BUFFER_STATE b )
#else
void yy_flush_buffer( b )
YY_BUFFER_STATE b;
#endif

	{
	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == yy_current_buffer )
		yy_load_buffer_state();
	}


#ifndef YY_NO_SCAN_BUFFER
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_buffer( char *base, yy_size_t size )
#else
YY_BUFFER_STATE yy_scan_buffer( base, size )
char *base;
yy_size_t size;
#endif
	{
	YY_BUFFER_STATE b;

	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b );

	return b;
	}
#endif


#ifndef YY_NO_SCAN_STRING
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_string( yyconst char *str )
#else
YY_BUFFER_STATE yy_scan_string( str )
yyconst char *str;
#endif
	{
	int len;
	for ( len = 0; str[len]; ++len )
		;

	return yy_scan_bytes( str, len );
	}
#endif


#ifndef YY_NO_SCAN_BYTES
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_bytes( yyconst char *bytes, int len )
#else
YY_BUFFER_STATE yy_scan_bytes( bytes, len )
yyconst char *bytes;
int len;
#endif
	{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;

	/* Get memory for full buffer, including space for trailing EOB's. */
	n = len + 2;
	buf = (char *) yy_flex_alloc( n );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < len; ++i )
		buf[i] = bytes[i];

	buf[len] = buf[len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
	}
#endif


#ifndef YY_NO_PUSH_STATE
#ifdef YY_USE_PROTOS
static void yy_push_state( int new_state )
#else
static void yy_push_state( new_state )
int new_state;
#endif
	{
	if ( yy_start_stack_ptr >= yy_start_stack_depth )
		{
		yy_size_t new_size;

		yy_start_stack_depth += YY_START_STACK_INCR;
		new_size = yy_start_stack_depth * sizeof( int );

		if ( ! yy_start_stack )
			yy_start_stack = (int *) yy_flex_alloc( new_size );

		else
			yy_start_stack = (int *) yy_flex_realloc(
					(void *) yy_start_stack, new_size );

		if ( ! yy_start_stack )
			YY_FATAL_ERROR(
			"out of memory expanding start-condition stack" );
		}

	yy_start_stack[yy_start_stack_ptr++] = YY_START;

	BEGIN(new_state);
	}
#endif


#ifndef YY_NO_POP_STATE
static void yy_pop_state()
	{
	if ( --yy_start_stack_ptr < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN(yy_start_stack[yy_start_stack_ptr]);
	}
#endif


#ifndef YY_NO_TOP_STATE
static int yy_top_state()
	{
	return yy_start_stack[yy_start_stack_ptr - 1];
	}
#endif

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

#ifdef YY_USE_PROTOS
static void yy_fatal_error( yyconst char msg[] )
#else
static void yy_fatal_error( msg )
char msg[];
#endif
	{
	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
	}



/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		yytext[yyleng] = yy_hold_char; \
		yy_c_buf_p = yytext + n - YY_MORE_ADJ; \
		yy_hold_char = *yy_c_buf_p; \
		*yy_c_buf_p = '\0'; \
		yyleng = n; \
		} \
	while ( 0 )


/* Internal utility routines. */

#ifndef yytext_ptr
#ifdef YY_USE_PROTOS
static void yy_flex_strncpy( char *s1, yyconst char *s2, int n )
#else
static void yy_flex_strncpy( s1, s2, n )
char *s1;
yyconst char *s2;
int n;
#endif
	{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
	}
#endif


#ifdef YY_USE_PROTOS
static void *yy_flex_alloc( yy_size_t size )
#else
static void *yy_flex_alloc( size )
yy_size_t size;
#endif
	{
	return (void *) malloc( size );
	}

#ifdef YY_USE_PROTOS
static void *yy_flex_realloc( void *ptr, yy_size_t size )
#else
static void *yy_flex_realloc( ptr, size )
void *ptr;
yy_size_t size;
#endif
	{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
	}

#ifdef YY_USE_PROTOS
static void yy_flex_free( void *ptr )
#else
static void yy_flex_free( ptr )
void *ptr;
#endif
	{
	free( ptr );
	}

#if YY_MAIN
int main()
	{
	yylex();
	return 0;
	}
#endif
#line 344 "MSV.l"


void DeleteSingleLineComment(void)
{
    register int c;

	while((c=yyinput()) != '\n' && c!=EOF)
	{
	    // do nothing
    }
	++lineno;
}

void passStringConstant (void)
{//modified by yubin 2014/2/25，处理char*字符串中的转义字符，第一个if分支处理没有转义字符的情况，下面的分支处理有转义字符的情况
	int l = ( strlen( yytext ) - 2 );
	yylval.cString = new char[l+1];
	strncpy( yylval.cString, &yytext[1], l );
	int j=0;//j用来记录转义字符的个数
	int i=0;
	for(;i+j<l;i=i+1)
	{
		if(yylval.cString[i+j]!='\\')
		{
			yylval.cString[i]=yylval.cString[i+j];
		}
		else if(yylval.cString[i+j+1]=='n')
		{
			yylval.cString[i]='\n';
			j=j+1;
		}
		else if(yylval.cString[i+j+1]=='b')
		{
			yylval.cString[i]='\b';
			j=j+1;
		}
		else if(yylval.cString[i+j+1]=='f')
		{
			yylval.cString[i]='\f';
			j=j+1;
		}
		else if(yylval.cString[i+j+1]=='r')
		{
			yylval.cString[i]='\r';
			j=j+1;
		}
		else if(yylval.cString[i+j+1]=='t')
		{
			yylval.cString[i]='\t';
			j=j+1;
		}
		else if(yylval.cString[i+j+1]=='\'')
		{
			yylval.cString[i]='\'';
			j=j+1;
		}
		else if(yylval.cString[i+j+1]=='\"')
		{
			yylval.cString[i]='\"';
			j=j+1;
		}
		else if(yylval.cString[i+j+1]=='\\')
		{
			yylval.cString[i]='\\';
			j=j+1;
		}
		else if(yylval.cString[i+j+1]=='0')
		{
			yylval.cString[i]='\0';
			j=j+1;
		}
		else//是转义字符，但是不是上面的一些转义字符，暂时什么也不做
		{

		}
	}
	yylval.cString[i] = '\0';
}